import time
from pprint import pprint
from zapv2 import ZAPv2




def attack(url):

    target = f"{url}"
    apikey = "t1srcoh96m3j4msj7raoe3aoua"  # Change to match the API key set in ZAP, or use None if the API key is disabled
    #
    # By default ZAP API client will connect to port 8080
    zap = ZAPv2(apikey=apikey)
    # Use the line below if ZAP is not listening on port 8080, for example, if listening on port 8090
    zap = ZAPv2(apikey=apikey, proxies={'http': 'http://localhost:8080', 'https': 'http://localhost:8080'})

    # Proxy a request to the target so that ZAP has something to deal with
    print('Accessing target {}'.format(target))
    zap.urlopen(target)
    # Give the sites tree a chance to get updated
    time.sleep(2)

    print('Spidering target {}'.format(target))

    # scanid = zap.spider.scan(target)
    # # Give the Spider a chance to start
    # time.sleep(2)
    #
    # while (int(zap.spider.status(scanid)) < 100):
    #     # Loop until the spider has finished
    #     print('Spider progress %: {}'.format(zap.spider.status(scanid)))
    #     time.sleep(2)
    #
    # print('Spider completed')

    while (int(zap.pscan.records_to_scan) > 0):
        print('Records to passive scan : {}'.format(zap.pscan.records_to_scan))
        time.sleep(2)

    print('Passive Scan completed')

    print('Active Scanning target {}'.format(target))
    scanid = zap.ascan.scan(target)
    while (int(zap.ascan.status(scanid)) < 100):
        # Loop until the scanner has finished
        print('Scan progress %: {}'.format(zap.ascan.status(scanid)))
        time.sleep(5)

    print('Active Scan completed')

    # Report the results
    zap.reports.generate(title='report', template='risk-confidence-html', theme='original', apikey=apikey, reportdir="D:\\Projects\\Django\Code\\templates\\", display=True)
